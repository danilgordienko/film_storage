--liquibase formatted sql

--changeset danilgordienko:001-init
CREATE TABLE IF NOT EXISTS access_tokens
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token   VARCHAR(255)                            NOT NULL,
    user_id BIGINT                                  NOT NULL,
    CONSTRAINT pk_access_tokens PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS favorites
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id  BIGINT                                  NOT NULL,
    movie_id BIGINT                                  NOT NULL,
    added_at TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_favorites PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS friend_request
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    sender_id   BIGINT,
    receiver_id BIGINT,
    created_at  TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_friend_request PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS friendships
(
    friend_id BIGINT NOT NULL,
    user_id   BIGINT NOT NULL
);

CREATE TABLE IF NOT EXISTS genres
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    tmdb_id BIGINT                                  NOT NULL,
    name    VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_genres PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS movie_genres
(
    genre_id BIGINT NOT NULL,
    movie_id BIGINT NOT NULL,
    CONSTRAINT pk_movie_genres PRIMARY KEY (genre_id, movie_id)
    );

CREATE TABLE IF NOT EXISTS movies
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    release_date TIMESTAMP WITHOUT TIME ZONE,
    description  TEXT,
    title        VARCHAR(255),
    poster       VARCHAR(255),
    CONSTRAINT pk_movies PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS ratings
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id    BIGINT                                  NOT NULL,
    movie_id   BIGINT                                  NOT NULL,
    rating     INTEGER                                 NOT NULL,
    comment    TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_ratings PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS recommendation
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    sender_id   BIGINT,
    receiver_id BIGINT,
    movie_id    BIGINT,
    CONSTRAINT pk_recommendation PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS refresh_tokens
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token   VARCHAR(255)                            NOT NULL,
    user_id BIGINT                                  NOT NULL,
    revoked BOOLEAN                                 NOT NULL,
    CONSTRAINT pk_refresh_tokens PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS user_roles
(
    user_id BIGINT NOT NULL,
    role    VARCHAR(255)
    );

CREATE TABLE IF NOT EXISTS users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    email    VARCHAR(255),
    username VARCHAR(255)                            NOT NULL,
    password VARCHAR(255)                            NOT NULL,
    avatar   BYTEA,
    CONSTRAINT pk_users PRIMARY KEY (id)
    );

-- Constraints (без IF NOT EXISTS, Liquibase проверяет через DATABASECHANGELOG)
ALTER TABLE access_tokens
    ADD CONSTRAINT uc_access_tokens_token UNIQUE (token);

ALTER TABLE genres
    ADD CONSTRAINT uc_genres_name UNIQUE (name);

ALTER TABLE genres
    ADD CONSTRAINT uc_genres_tmdbid UNIQUE (tmdb_id);

ALTER TABLE refresh_tokens
    ADD CONSTRAINT uc_refresh_tokens_token UNIQUE (token);

ALTER TABLE users
    ADD CONSTRAINT uc_users_email UNIQUE (email);

ALTER TABLE users
    ADD CONSTRAINT uc_users_username UNIQUE (username);

ALTER TABLE access_tokens
    ADD CONSTRAINT FK_ACCESS_TOKENS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE favorites
    ADD CONSTRAINT FK_FAVORITES_ON_MOVIE FOREIGN KEY (movie_id) REFERENCES movies (id);

ALTER TABLE favorites
    ADD CONSTRAINT FK_FAVORITES_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE friend_request
    ADD CONSTRAINT FK_FRIEND_REQUEST_ON_RECEIVER FOREIGN KEY (receiver_id) REFERENCES users (id);

ALTER TABLE friend_request
    ADD CONSTRAINT FK_FRIEND_REQUEST_ON_SENDER FOREIGN KEY (sender_id) REFERENCES users (id);

ALTER TABLE ratings
    ADD CONSTRAINT FK_RATINGS_ON_MOVIE FOREIGN KEY (movie_id) REFERENCES movies (id);

ALTER TABLE ratings
    ADD CONSTRAINT FK_RATINGS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE recommendation
    ADD CONSTRAINT FK_RECOMMENDATION_ON_MOVIE FOREIGN KEY (movie_id) REFERENCES movies (id);

ALTER TABLE recommendation
    ADD CONSTRAINT FK_RECOMMENDATION_ON_RECEIVER FOREIGN KEY (receiver_id) REFERENCES users (id);

ALTER TABLE recommendation
    ADD CONSTRAINT FK_RECOMMENDATION_ON_SENDER FOREIGN KEY (sender_id) REFERENCES users (id);

ALTER TABLE refresh_tokens
    ADD CONSTRAINT FK_REFRESH_TOKENS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE friendships
    ADD CONSTRAINT fk_fri_on_friend FOREIGN KEY (friend_id) REFERENCES users (id);

ALTER TABLE friendships
    ADD CONSTRAINT fk_fri_on_user FOREIGN KEY (user_id) REFERENCES users (id);

ALTER TABLE movie_genres
    ADD CONSTRAINT fk_movgen_on_genre FOREIGN KEY (genre_id) REFERENCES genres (id);

ALTER TABLE movie_genres
    ADD CONSTRAINT fk_movgen_on_movie FOREIGN KEY (movie_id) REFERENCES movies (id);

ALTER TABLE user_roles
    ADD CONSTRAINT fk_user_roles_on_user FOREIGN KEY (user_id) REFERENCES users (id);
